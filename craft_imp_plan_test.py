'''
Compares the files generated by macros
with the improvement plans submitted by users
'''
#Import statements starts
import os
import configparser
import pandas as pd
import numpy as np
import win32com.client as win32
from craft_imp_plan_migration_related_changes import migration_related_changes
#Import statements ends

#Function declaration Phase Starts
def identify_column_diff(old_list, new_list):
    """
    Compares Column Header values and data types
    """
    old_val = []
    new_val = []
    for index, (old, new) in enumerate(zip(old_list, new_list)):
        if old != new:
            old_val.append(old)
            new_val.append(new)
            print(index)
    return str(old_val), str(new_val)

def compare_improvement_plans(old_plan, new_plan, plan, imp_plan_section):
    """
    Compares improvement plans for differences
    """
    if old_plan.equals(new_plan):
        return pd.DataFrame(
            {
                'plan': plan, 'section': imp_plan_section,
                'Result': 'Match', 'from': '', 'to': ''
                },
            index=['First']
            )
    if len(old_plan) != len(new_plan):
        return pd.DataFrame(
            {
                'plan': NEWFILENAME, 'section': imp_plan_section,
                'Result': 'Missmatch row count',
                'from': str(len(old_plan))+' rows', 'to': str(len(new_plan))+' rows'
                },
            index=['First']
            )
    if len(old_plan.columns) != len(new_plan.columns):
        return pd.DataFrame(
            {
                'plan': plan, 'section': imp_plan_section,
                'Result': 'Missmatch column count',
                'from': str(len(old_plan.columns))+' columns',
                'to': str(len(new_plan.columns))+' columns'
                },
            index=['First']
            )
    if (old_plan.columns == new_plan.columns).all() and any(old_plan.dtypes != new_plan.dtypes):
        old_col_dtypes = list(map(list, zip(list(old_plan.columns.values), list(old_plan.dtypes))))
        new_col_dtypes = list(map(list, zip(list(new_plan.columns.values), list(new_plan.dtypes))))
        old_val_str, new_val_str = identify_column_diff(old_col_dtypes, new_col_dtypes)
        return pd.DataFrame(
            {
                'plan': plan, 'section': imp_plan_section,
                'Result': 'Missmatch data type of same columns',
                'from': old_val_str, 'to': new_val_str
                },
            index=['First']
            )
    if any(old_plan.columns != new_plan.columns):
        old_plan_columns = list(old_plan.columns.values)
        new_plan_columns = list(new_plan.columns.values)
        old_val_str, new_val_str = identify_column_diff(old_plan_columns, new_plan_columns)
        return pd.DataFrame(
            {
                'plan': plan, 'section': imp_plan_section,
                'Result': 'Different Columns Names',
                'from': old_val_str, 'to': new_val_str
                },
            index=['First']
            )
    diff_mask = (old_plan != new_plan) & ~(old_plan.isnull() & new_plan.isnull())
    ne_stacked = diff_mask.stack()
    changed = ne_stacked[ne_stacked]
    changed.index.names = ['id', 'col']
    difference_locations = np.where(diff_mask)
    return pd.DataFrame(
        {
            'plan': NEWFILENAME, 'section': imp_plan_section,
            'Result': 'Missmatch in data',
            'from': old_plan.values[difference_locations],
            'to': new_plan.values[difference_locations]
            },
        index=changed.index
        )


def check_sheet_protection(file_path, plan, sheet):
    '''Sheet protection check'''
    excel_file = win32.gencache.EnsureDispatch('Excel.Application')
    work_book = excel_file.Workbooks.Open(file_path)
    excel_file.Visible = True
    work_sheet = work_book.Worksheets(sheet)
    try:
        work_sheet.Range("A1").Value = "Cell A1"
        return pd.DataFrame(
            {
                'plan': plan, 'sheet': sheet,
                'Result': 'Sheet Not Protected'
            },
            index=['FIRST']
        )
    except: # pylint: disable=W0702
        return pd.DataFrame(
            {
                'plan': plan, 'sheet': sheet,
                'Result': 'Sheet Protected'
            },
            index=['FIRST']
        )
    finally:
        excel_file.DisplayAlerts = False
        work_book.Close(False)
        excel_file.Application.Quit()

def prepare_data_for_test(config_sheet_reader_item, old_path, new_path):
    """
    Prepares improvement plan data for test
    """
    old_plan_path = old_path
    new_plan_path = new_path
    config_sheet_reader_item_key = config_sheet_reader_item
    old_data = pd.read_excel(
        old_plan_path, sheet_name=CONFIG[config_sheet_reader_item_key]['SheetName'],
        skiprows=int(CONFIG[config_sheet_reader_item_key]['skiprows']),
        nrows=int(CONFIG[config_sheet_reader_item_key]['nrows']),
        usecols=CONFIG[config_sheet_reader_item_key]['parse_cols']
        )
    if config_sheet_reader_item_key in ('Readsheet ProjectList2019', 'Readsheet ProjectList2020'):
        new_data = pd.read_excel(
            new_plan_path, sheet_name=CONFIG[config_sheet_reader_item_key]['SheetName'],
            skiprows=int(CONFIG[config_sheet_reader_item_key]['skiprows'])+4,
            nrows=int(CONFIG[config_sheet_reader_item_key]['nrows']),
            usecols=CONFIG[config_sheet_reader_item_key]['parse_cols']
            )
    else:
        new_data = pd.read_excel(
            new_plan_path, sheet_name=CONFIG[config_sheet_reader_item_key]['SheetName'],
            skiprows=int(CONFIG[config_sheet_reader_item_key]['skiprows']),
            nrows=int(CONFIG[config_sheet_reader_item_key]['nrows']),
            usecols=CONFIG[config_sheet_reader_item_key]['parse_cols']
            )

    df_old_data = pd.DataFrame(old_data)
    df_old_data = df_old_data[
        df_old_data[
            CONFIG[config_sheet_reader_item_key]['nullCheck']].notnull()]
    #Section to be removed post migration
    if config_sheet_reader_item_key in ('Readsheet ProjectList2019', 'Readsheet ProjectList2020'):
        df_old_data = migration_related_changes(
            df_old_data, CONFIG[config_sheet_reader_item_key]['nullCheck'],
            CONFIG[config_sheet_reader_item_key]['RankCheck']
            )
        df_old_data = df_old_data[df_old_data.columns[:-1]]
        df_old_data = df_old_data.reset_index(drop=True)
    #Section to be removed post migration
    df_new_data = pd.DataFrame(new_data)
    df_new_data = df_new_data[
        df_new_data[CONFIG[config_sheet_reader_item_key]['nullCheck']].notnull()]
    return df_old_data, df_new_data
#Function declaration Phase Ends

#Preprocessing Preparation Phase Starts
CONFIG = configparser.ConfigParser()
CONFIG.read('ImpPlanReaderConfig.ini')

IMPPLANOLDFILEPATH = CONFIG['ConnectionString SourceFilePath']['sourcefilepath']
IMPPLANNEWFILEPATH = CONFIG['ConnectionString NewFilePath']['sourcefilepath']

ALLOUTPUTFILES = list(filter(lambda x: x.endswith('.xlsx'), os.listdir(IMPPLANNEWFILEPATH)))
CONFIGSHEETREADER = list(filter(lambda x: x.startswith('Readsheet'), CONFIG.sections()))

#NEWFILENAME = ALLOUTPUTFILES[randint(0,47)]
NEWFILENAME = ALLOUTPUTFILES[28]
OLDFILENAME = NEWFILENAME[:-4] + "xlsm"  #Once migration is done this line will change

OLDFILEPATH = IMPPLANOLDFILEPATH + OLDFILENAME
NEWFILEPATH = IMPPLANNEWFILEPATH + NEWFILENAME
COMPARERESULTAPPENDED = pd.DataFrame()
SHEETPROTECTIONRESULTAPPENDED = pd.DataFrame()
#Preprocessing Preparation Phase Ends

#Data Reading & Testing Phase Starts
for configSheetReaderItem in CONFIGSHEETREADER:

    old_imp_plan, new_imp_plan = prepare_data_for_test(
        configSheetReaderItem,
        OLDFILEPATH,
        NEWFILEPATH
        )
    CompareResult = compare_improvement_plans(
        old_imp_plan, new_imp_plan, NEWFILENAME, configSheetReaderItem)
    COMPARERESULTAPPENDED = COMPARERESULTAPPENDED.append(
        CompareResult,
        ignore_index=True,
        sort=True
        )

    SheetProtectionResult = check_sheet_protection(
        NEWFILEPATH, NEWFILENAME, CONFIG[configSheetReaderItem]['SheetName']
        )
    SHEETPROTECTIONRESULTAPPENDED = SHEETPROTECTIONRESULTAPPENDED.append(
        SheetProtectionResult,
        ignore_index=True,
        sort=True
        )

COMPARERESULTAPPENDED = COMPARERESULTAPPENDED[['plan', 'section', 'Result', 'from', 'to']]
SHEETPROTECTIONRESULTAPPENDED = SHEETPROTECTIONRESULTAPPENDED[['plan', 'sheet', 'Result']]

print(COMPARERESULTAPPENDED)
print(SHEETPROTECTIONRESULTAPPENDED)
#Data Reading & Testing Phase Ends

#Data Output write Phase starts
WRITER = pd.ExcelWriter('TestResults.xlsx', engine='xlsxwriter')
COMPARERESULTAPPENDED.to_excel(WRITER, sheet_name='CompareResult', index=False)
SHEETPROTECTIONRESULTAPPENDED.to_excel(WRITER, sheet_name='SheetProtectionResult', index=False)

# Close the Pandas Excel WRITER and output the Excel file.
WRITER.save()
#Data Output write Phase ends
